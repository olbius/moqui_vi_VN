<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="process" noun="ReturnItemResponses">
        <description>
            Process responses for items with statuses other than Created, Requested, or Cancelled.
            Called by SECA rule on ReturnHeader Approved and ReturnItem Received statuses.
            If ReturnItem.responseImmediate = 'Y' process on Approved status or later (Shipped, Received, Completed).
            If ReturnItem.responseImmediate = 'N' (or null) process on Received status or later (Completed).
            Only processes responses for items with no response already (responseDate == null).
        </description>
        <in-parameters>
            <parameter name="returnId" required="true"/>
            <parameter name="returnItemSeqId"><description>If not specified try processing all items (most common)</description></parameter>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.return.ReturnHeader" value-field="returnHeader"/>

            <!-- NOTE: may be better date for this, like maybe Shipment receipt date/time -->
            <set field="responseDate" from="ec.user.nowTimestamp"/>

            <!-- make sure customer is not an internal org, ie this is a sales return and not a purchase return -->
            <entity-find-one entity-name="mantle.party.PartyRole" value-field="customerOrgInternal">
                <field-map field-name="partyId" from="returnHeader.customerPartyId"/>
                <field-map field-name="roleTypeId" value="OrgInternal"/></entity-find-one>
            <if condition="customerOrgInternal">
                <return/>
                <!--<return message="Cannot process return responses for supplier purchase return"/>-->
            </if>

            <entity-find entity-name="mantle.order.return.ReturnItem" list="returnItemList" for-update="true">
                <econdition field-name="returnId"/>
                <econdition field-name="returnItemSeqId" ignore-if-empty="true"/>
                <order-by field-name="returnItemSeqId"/>
            </entity-find>
            <set field="originalReplacementOrderIdSet" from="new HashSet(returnItemList*.replacementOrderId)"/>
            <script>originalReplacementOrderIdSet.remove(null)</script>

            <!-- split list into credit, refund, replace; check credit and refund items for unpaid invoices to adjust instead -->
            <set field="creditItemList" from="[]"/>
            <set field="refundItemList" from="[]"/>
            <set field="replaceItemList" from="[]"/>
            <set field="remainingAmountBySeqId" from="[:]"/>
            <set field="returnInvoiceId" from="null"/>
            <iterate list="returnItemList" entry="returnItem">
                <if condition="returnItem.responseDate != null"><continue/></if>
                <!-- only process response for items in status Received or Completed OR in status Approved or Shipped and are either Replace items or have responseImmediate == Y -->
                <!-- Replace items are included in the earlier status so we can create a Replacement Order in Placed status right away -->
                <set field="validStatus" from="returnItem.statusId in ['ReturnReceived', 'ReturnCompleted'] ||
                    ((returnItem.responseImmediate == 'Y' || returnItem.returnResponseEnumId == 'RrspReplace') &amp;&amp; returnItem.statusId in ['ReturnApproved', 'ReturnShipped'])"/>
                <if condition="!validStatus"><continue/></if>

                <!-- see if the invoice for returned order item is not yet paid, if so cancel/credit instead of credit or refund -->
                <if condition="returnItem.returnResponseEnumId in ['RrspCredit', 'RrspRefund']">
                    <entity-find-related-one value-field="returnItem" relationship-name="orderItem" to-value-field="orderItem"/>
                    <set field="itemQuantity" from="returnItem.receivedQuantity ?: returnItem.returnQuantity ?: 0.0"/>
                    <set field="itemAmount" from="returnItem.returnPrice ?: orderItem?.unitAmount ?: 0.0"/>
                    <set field="amountRemaining" from="(returnItem.responseAmount ?: (itemQuantity * itemAmount)).setScale(2, BigDecimal.ROUND_HALF_UP)"/>
                    <if condition="!amountRemaining">
                        <message>Return Item ${returnId}:${returnItem.returnItemSeqId} has no amount, not processing credit response</message>
                        <script>remainingAmountBySeqId.put(returnItem.returnItemSeqId, 0.0)</script>
                        <continue/>
                    </if>
                    <script>remainingAmountBySeqId.put(returnItem.returnItemSeqId, amountRemaining)</script>

                    <!-- always create return credit memo invoice; better not to adjust the original invoice, easier to track and reconcile -->
                    <!-- if only partial quantity received (receivedQuantity < returnQuantity) then prorate product item amounts and child item amounts (via itemQuantity, itemAmount) -->
                    <!-- create ReturnItemBilling records to connect ReturnItem and InvoiceItem -->

                    <!-- create return credit memo Invoice if needed -->
                    <if condition="!returnInvoiceId">
                        <service-call name="mantle.account.InvoiceServices.create#Invoice" out-map="returnInvoiceOut" out-map-add-to-existing="false"
                                      in-map="[fromPartyId:returnHeader.customerPartyId, toPartyId:returnHeader.vendorPartyId,
                                    invoiceTypeEnumId:'InvoiceReturn', invoiceDate:responseDate, currencyUomId:returnHeader.currencyUomId]"/>
                        <set field="returnInvoiceId" from="returnInvoiceOut.invoiceId"/>
                    </if>
                    <!-- create return credit memo InvoiceItem -->
                    <service-call name="mantle.account.InvoiceServices.create#InvoiceItem" out-map="retInvItemOut" out-map-add-to-existing="false"
                                  in-map="[invoiceId:returnInvoiceId, itemTypeEnumId:returnItem.itemTypeEnumId, description:returnItem.description,
                                quantity:itemQuantity, amount:itemAmount, productId:returnItem.productId]"/>
                    <!-- create ReturnItemBilling -->
                    <!-- TODO populate assetReceiptId -->
                    <service-call name="create#mantle.order.return.ReturnItemBilling" in-map="[returnId:returnId,
                            returnItemSeqId:returnItem.returnItemSeqId, invoiceId:returnInvoiceId,
                            invoiceItemSeqId:retInvItemOut.invoiceItemSeqId, quantity:itemQuantity, amount:itemAmount]"/>

                    <!-- old approach: adjust original invoice
                    <entity-find entity-name="mantle.order.OrderItemBilling" list="oibList">
                        <econdition field-name="orderId" from="returnItem.orderId"/>
                        <econdition field-name="orderItemSeqId" from="returnItem.orderItemSeqId"/></entity-find>
                    <iterate list="oibList" entry="oib">
                        <set field="invoiceItem" from="oib.invoiceItem"/>
                        <set field="iiTotal" from="(oib.quantity ?: 0.0) * (invoiceItem.amount ?: 0.0)"/>
                        <if condition="iiTotal == 0.0"><continue/></if>
                        <set field="adjustAmount" from="amountRemaining &gt; iiTotal ? iiTotal : amountRemaining"/>

                        <service-call name="mantle.account.InvoiceServices.get#InvoiceTotal"
                                out-map="invTotal" out-map-add-to-existing="false" in-map="[invoiceId:oib.invoiceId]"/>
                        <if condition="invTotal.unpaidTotal &gt; 0.0">
                            <!- - adjust by full oib/ii total if unpaidTotal is enough, otherwise just by unpaid total - ->
                            <set field="adjustAmount" from="invTotal.unpaidTotal &gt; adjustAmount ? adjustAmount : invTotal.unpaidTotal"/>
                            <!- - call invoice adjust, subtract adjustAmount - ->
                            <!- - NOTE: more direct way to link back to return item (than new ii to parent ii to oib to oi to ri)? - ->
                            <set field="adjDesc" value="Return Item ${returnId}:${returnItem.returnItemSeqId} for Order Item ${orderItem.orderId}:${orderItem.orderItemSeqId}"/>
                            <service-call name="mantle.account.InvoiceServices.adjust#Invoice"
                                    in-map="[invoiceId:oib.invoiceId, description:adjDesc, amount:adjustAmount,
                                        parentInvoiceItemSeqId:oib.invoiceItemSeqId, itemTypeEnumId:'ItemReturnAdjust']"/>
                            <!- - reduce amountRemaining - ->
                            <set field="amountRemaining" from="amountRemaining - adjustAmount"/>
                            <if condition="amountRemaining == 0.0"><break/></if>
                        </if>
                    </iterate>

                    <!- - save the amountRemaining so if there is any credit or refund it is only that amount - ->
                    <script>remainingAmountBySeqId.put(returnItem.returnItemSeqId, amountRemaining)</script>
                    -->
                </if>

                <if condition="returnItem.returnResponseEnumId == 'RrspCredit'"><then>
                    <script>creditItemList.add(returnItem)</script>
                </then><else-if condition="returnItem.returnResponseEnumId == 'RrspRefund'">
                    <script>refundItemList.add(returnItem)</script>
                </else-if><else-if condition="returnItem.returnResponseEnumId == 'RrspReplace'">
                    <script>replaceItemList.add(returnItem)</script>
                </else-if></if>
            </iterate>
            <!-- <log message="Response ${returnId}:${returnItemSeqId} \n creditItemList: ${creditItemList} \n refundItemList: ${refundItemList} \n replaceItemList: ${replaceItemList}"/> -->

            <!-- Customer Credit (Financial Account Transaction) -->
            <if condition="creditItemList">
                <set field="creditTotal" from="0.0"/>
                <set field="faItemList" from="[]"/>
                <iterate list="creditItemList" entry="returnItem">
                    <set field="itemTotal" from="remainingAmountBySeqId.get(returnItem.returnItemSeqId)"/>
                    <if condition="itemTotal == 0.0"><continue/></if>

                    <set field="creditTotal" from="creditTotal + itemTotal"/>
                    <script>faItemList.add(returnItem)</script>
                    <set field="returnItem.responseAmount" from="itemTotal"/>
                    <set field="returnItem.responseDate" from="responseDate"/>
                </iterate>

                <if condition="creditTotal">
                    <set field="finAccountId" from="returnHeader.finAccountId"/>
                    <if condition="!finAccountId">
                        <service-call name="mantle.account.FinancialAccountServices.getOrCreate#FinancialAccount"
                                      in-map="[finAccountTypeId:'CustomerCredit', ownerPartyId:returnHeader.customerPartyId,
                                organizationPartyId:returnHeader.vendorPartyId]" out-map="context"/>
                    </if>

                    <!-- create the FA Payment -->
                    <service-call name="mantle.account.PaymentServices.create#Payment" out-map="faPaymentOut" out-map-add-to-existing="false"
                                  in-map="[paymentTypeEnumId:'PtInvoicePayment', statusId:'PmntAuthorized',
                                paymentInstrumentEnumId:'PiFinancialAccount', finAccountId:finAccountId, effectiveDate:responseDate,
                                fromPartyId:returnHeader.vendorPartyId, toPartyId:returnHeader.customerPartyId,
                                amount:creditTotal, amountUomId:returnHeader.currencyUomId, forInvoiceId:returnInvoiceId]"/>
                    <!-- deliver the FA Payment via FA Trans; NOTE: could also do via SECA on set payment status to Delivered -->
                    <service-call name="mantle.account.FinancialAccountServices.checkCreate#PaymentTrans" out-map="faTxOut" out-map-add-to-existing="false"
                                  in-map="[paymentId:faPaymentOut.paymentId, reasonEnumId:'FatrCsCredit']"/>

                    <!-- set finAccountTransId and update all credit return items -->
                    <iterate list="faItemList" entry="returnItem">
                        <set field="returnItem.finAccountTransId" from="faTxOut.finAccountTransId"/>
                        <set field="returnItem.refundPaymentId" from="faPaymentOut.paymentId"/>
                        <entity-update value-field="returnItem"/>

                        <if condition="returnItem.statusId == 'ReturnReceived'">
                            <service-call name="mantle.order.ReturnServices.complete#ReturnItem"
                                          in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/></if>
                    </iterate>
                </if>
            </if>
            <!-- old approach, one direct FA transaction per item:
            <iterate list="creditItemList" entry="returnItem">
                <set field="itemTotal" from="remainingAmountBySeqId.get(returnItem.returnItemSeqId)"/>
                <if condition="itemTotal == 0.0"><continue/></if>

                <set field="finAccountId" from="returnHeader.finAccountId"/>
                <if condition="!finAccountId">
                    <service-call name="mantle.account.FinancialAccountServices.getOrCreate#FinancialAccount"
                            in-map="[finAccountTypeId:'CustomerCredit', ownerPartyId:returnHeader.customerPartyId,
                                organizationPartyId:returnHeader.vendorPartyId]" out-map="context"/>
                </if>

                <if condition="itemTotal &gt; 0.0"><then>
                    <service-call name="mantle.account.FinancialAccountServices.deposit#FinancialAccount" out-map="faTxOut"
                            in-map="[finAccountId:finAccountId, reasonEnumId:'FatrCsCredit', amount:itemTotal]"/>
                    <set field="returnItem.finAccountTransId" from="faTxOut.finAccountTransId"/>
                </then><else>
                    <service-call name="mantle.account.FinancialAccountServices.withdraw#FinancialAccount" out-map="faTxOut"
                            in-map="[finAccountId:finAccountId, reasonEnumId:'FatrCsCredit', amount:-itemTotal]"/>
                    <set field="returnItem.finAccountTransId" from="faTxOut.finAccountTransId"/>
                </else></if>

                <set field="returnItem.responseAmount" from="itemTotal"/>
                <set field="returnItem.responseDate" from="responseDate"/>
                <entity-update value-field="returnItem"/>

                <if condition="returnItem.statusId == 'ReturnReceived'">
                    <service-call name="mantle.order.ReturnServices.complete#ReturnItem"
                            in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/></if>
            </iterate>
            -->

            <!-- Refund (Payment); consolidate for checks -->
            <if condition="refundItemList">
                <!-- NOTE: Authorize.NET time limit for refunds is 120 days, use 115 days before now as time limit to give small buffer -->
                <set field="ccEarliestDate" from="ec.user.nowTimestamp - 115"/>

                <set field="paymentTotal" from="0.0"/>
                <set field="paymentItemList" from="[]"/>
                <set field="returnItemByOrderPartId" from="[:]"/>
                <iterate list="refundItemList" entry="returnItem">
                    <set field="itemTotal" from="remainingAmountBySeqId.get(returnItem.returnItemSeqId)"/>
                    <if condition="itemTotal == 0.0"><continue/></if>

                    <if condition="returnHeader.useSingleRefundPayment != 'Y'">
                        <!-- TODO look at original payments for each OrderPart, if credit card payment found that is not too old then refund to card -->
                    </if>

                    <set field="paymentTotal" from="paymentTotal + itemTotal"/>
                    <script>paymentItemList.add(returnItem)</script>
                    <set field="returnItem.responseAmount" from="itemTotal"/>
                    <set field="returnItem.responseDate" from="responseDate"/>
                </iterate>

                <if condition="paymentTotal">
                    <!-- lookup Return Refund PaymentMethod (BankAccount) for internal org (vendor) -->
                    <entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList">
                        <date-filter/><econdition field-name="ownerPartyId" from="returnHeader.vendorPartyId"/>
                        <econdition field-name="purposeEnumId" value="PmpReturnRefund"/>
                        <order-by field-name="-fromDate"/>
                    </entity-find>
                    <if condition="!paymentMethodList"><entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethodList">
                        <date-filter/><econdition field-name="ownerPartyId" from="returnHeader.vendorPartyId"/>
                        <econdition field-name="purposeEnumId" value="PmpGeneral"/>
                        <order-by field-name="-fromDate"/>
                    </entity-find></if>
                    <if condition="paymentMethodList"><set field="paymentMethodId" from="paymentMethodList[0].paymentMethodId"/></if>

                    <!-- handle other side of Payment, for each refund Payment here:
                        (may be multiple Payments applied to sales invoice, if some Delivered/Applied and others not then generate partial invoice if needed and reduce the undelivered payments?)
                        - if order Payment(s) in Delivered status
                          - NOTE: now always creating credit memo invoice instead of modifying, simplifies the logic here; always do 'else' with setting forInvoiceId
                          - if sales invoice was adjusted above then apply refund Payment to original sales invoice Payment
                          - else generate return invoice (credit memo) and set here on Payment.forInvoiceId (return refund payment applied to return credit memo invoice)
                        - TODO else if order Payment(s) in Promised or Authorized status
                          - old approach with invoice adjust, no longer applicable:
                            - these would be payments with forInvoiceId = sales invoice ID or order/part payments
                            - sales incoming payments in these statuses won't be applied to invoice so the sales invoice should have been adjusted above
                            - reduce Payment(s) amount as needed, if multiple instruments reduce CC before FinancialAccount (customer credits), etc
                          - TODO instead of Payment apply return credit memo invoice to sales invoice
                    -->

                    <!-- NOTE: don't specify paymentInstrumentEnumId, create#Payment will determine from toPaymentMethodId or default to PiCompanyCheck (paymentInstrumentEnumId:'PiCompanyCheck',) -->
                    <service-call name="mantle.account.PaymentServices.create#Payment" out-map="refundPmntOut" out-map-add-to-existing="false"
                                  in-map="[paymentTypeEnumId:'PtRefund', statusId:'PmntPromised',
                            fromPartyId:returnHeader.vendorPartyId, toPartyId:returnHeader.customerPartyId,
                            paymentMethodId:paymentMethodId, toPaymentMethodId:returnHeader.paymentMethodId,
                            amount:paymentTotal, amountUomId:returnHeader.currencyUomId, forInvoiceId:returnInvoiceId]"/>

                    <iterate list="paymentItemList" entry="returnItem">
                        <set field="returnItem.refundPaymentId" from="refundPmntOut.paymentId"/>
                        <entity-update value-field="returnItem"/>

                        <if condition="returnItem.statusId == 'ReturnReceived'">
                            <service-call name="mantle.order.ReturnServices.complete#ReturnItem"
                                          in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/></if>
                    </iterate>

                    <!-- TODO: if CC do refund Payment via gateway; may need new code that
                        - add Payment.refundForPaymentId and refund against that CC Payment
                        - if multiple original payments may need to split refund across multiple CC payments
                    -->
                </if>
            </if>

            <!-- Replace (Order); consolidate all -->
            <if condition="replaceItemList">
                <!-- split into two lists for Placed vs Approved replacement orders (break down big 'validStatus' condition):
                    1. Approved: item status is ReturnReceived or ReturnCompleted OR responseImmediate == 'Y'
                    2. Placed: not in #1 (responseImmediate != 'Y' and in earlier status)
                -->
                <set field="approvedItemSet" from="new HashSet()"/>
                <set field="placedItemSet" from="new HashSet()"/>
                <iterate list="replaceItemList" entry="replaceItem">
                    <if condition="replaceItem.responseImmediate == 'Y' || replaceItem.statusId in ['ReturnReceived', 'ReturnCompleted']"><then>
                        <script>approvedItemSet.add(replaceItem.returnItemSeqId)</script>
                    </then><else>
                        <script>placedItemSet.add(replaceItem.returnItemSeqId)</script>
                    </else></if>
                </iterate>

                <if condition="approvedItemSet">
                    <service-call name="mantle.order.OrderServices.create#Order" out-map="approvedOrderOut"
                                  in-map="[vendorPartyId:returnHeader.vendorPartyId, customerPartyId:returnHeader.customerPartyId]"/>
                </if>
                <if condition="placedItemSet">
                    <service-call name="mantle.order.OrderServices.create#Order" out-map="placedOrderOut"
                                  in-map="[vendorPartyId:returnHeader.vendorPartyId, customerPartyId:returnHeader.customerPartyId]"/>
                </if>

                <iterate list="replaceItemList" entry="returnItem">
                    <set field="replaceOrderId" from="approvedItemSet.contains(returnItem.returnItemSeqId) ? approvedOrderOut.orderId : placedOrderOut.orderId"/>
                    <set field="itemQuantity" from="returnItem.receivedQuantity ?: returnItem.returnQuantity"/>

                    <service-call name="mantle.order.OrderServices.add#OrderProductQuantity"
                                  in-map="[orderId:replaceOrderId, productId:(returnItem.replacementProductId ?: returnItem.productId),
                                quantity:itemQuantity, unitAmount:0.0]"/>

                    <set field="returnItem.replacementOrderId" from="replaceOrderId"/>
                    <set field="returnItem.responseDate" from="responseDate"/>
                    <entity-update value-field="returnItem"/>

                    <if condition="returnItem.statusId == 'ReturnReceived'">
                        <service-call name="mantle.order.ReturnServices.complete#ReturnItem"
                                      in-map="[returnId:returnId, returnItemSeqId:returnItem.returnItemSeqId]"/></if>
                </iterate>

                <if condition="approvedOrderOut">
                    <service-call name="mantle.order.OrderServices.set#OrderBillingShippingInfo"
                                  in-map="[orderId:approvedOrderOut.orderId, shippingPostalContactMechId:returnHeader.postalContactMechId,
                            shippingTelecomContactMechId:returnHeader.telecomContactMechId,
                            shippingFacilityId:returnHeader.facilityId, carrierPartyId:returnHeader.carrierPartyId,
                            shipmentMethodEnumId:returnHeader.shipmentMethodEnumId]"/>
                    <!-- place and approve order, come from here ready to ship -->
                    <service-call name="mantle.order.OrderServices.place#Order" in-map="[orderId:approvedOrderOut.orderId]"/>
                    <service-call name="mantle.order.OrderServices.approve#Order" in-map="[orderId:approvedOrderOut.orderId]"/>
                </if>
                <if condition="placedOrderOut">
                    <service-call name="mantle.order.OrderServices.set#OrderBillingShippingInfo"
                                  in-map="[orderId:placedOrderOut.orderId, shippingPostalContactMechId:returnHeader.postalContactMechId,
                            shippingTelecomContactMechId:returnHeader.telecomContactMechId,
                            shippingFacilityId:returnHeader.facilityId, carrierPartyId:returnHeader.carrierPartyId,
                            shipmentMethodEnumId:returnHeader.shipmentMethodEnumId]"/>
                    <!-- place order only, will be approved later -->
                    <service-call name="mantle.order.OrderServices.place#Order" in-map="[orderId:placedOrderOut.orderId]"/>
                </if>
            </if>

            <!-- if there are one or more associated Replacement Orders in the Placed status and they now qualify for Approved then Approve -->
            <iterate list="originalReplacementOrderIdSet" entry="originalReplacementOrderId">
                <entity-find-one entity-name="mantle.order.OrderHeader" value-field="replaceOrderHeader">
                    <field-map field-name="orderId" from="originalReplacementOrderId"/></entity-find-one>
                <if condition="replaceOrderHeader == null">
                    <log level="error" message="In process responses for return ${returnId} could not find replacement OrderHeader ${originalReplacementOrderId}"/>
                    <continue/>
                </if>
                <if condition="replaceOrderHeader.statusId == 'OrderPlaced'">
                    <set field="curOrderReturnItemList" from="returnItemList.findAll({ it.replacementOrderId == originalReplacementOrderId })"/>
                    <set field="approveOrder" from="true"/>
                    <iterate list="curOrderReturnItemList" entry="curOrderReturnItem">
                        <if condition="!(curOrderReturnItem.statusId in ['ReturnReceived', 'ReturnCompleted'])">
                            <set field="approveOrder" from="false"/>
                            <break/>
                        </if>
                    </iterate>
                    <if condition="approveOrder">
                        <service-call name="mantle.order.OrderServices.approve#Order" in-map="[orderId:originalReplacementOrderId]"/>
                    </if>
                </if>
            </iterate>

            <!-- if returnInvoiceId set statusId to InvoiceApproved, trigger payment applications based on forInvoiceId -->
            <if condition="returnInvoiceId">
                <service-call name="update#mantle.account.invoice.Invoice" in-map="[invoiceId:returnInvoiceId, statusId:'InvoiceApproved']"/>
            </if>
        </actions>
    </service>

</services>
