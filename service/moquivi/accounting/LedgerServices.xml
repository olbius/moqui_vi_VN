<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="create" noun="FinancialTimePeriodClosingAcctgTrans">
        <description>create AcctgTrans type AttPeriodClosing for a Financial Time Period</description>
        <in-parameters>
            <parameter name="timePeriodId" required="true"/>
            <parameter name="postTransactions" type="Boolean" default="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="resultSuccess" type="Boolean" default-value="false"/>
            <parameter name="acctgTransIdByAccClosingEntry" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.time.TimePeriod" value-field="timePeriod" for-update="true"/>
            <if condition="timePeriod == null"><return error="true" message="Time Period ${timePeriodId} not found"/></if>

            <set field="organizationPartyId" from="timePeriod.partyId"/>
            <service-call name="mantle.party.TimeServices.get#TimePeriodInfo" in-map="[timePeriod:timePeriod]" out-map="periodInfo"/>
            <set field="transactionDate" from="periodInfo.thruTimestampLate"/>
            <if condition="ec.user.nowTimestamp &lt; periodInfo.thruTimestamp"><message>Fiscal period ${timePeriodId} has not yet ended (ends on ${timePeriod.thruDate})</message></if>
            <!--
            <if condition="timePeriod.isClosed != 'Y'"><message>Fiscal period ${timePeriodId} is not yet closed, Period Closing transactions may be posted after a period is closed and posting period close transactions before a period is closed may result in non-zero balances, requiring another closing transaction</message></if>
            -->

            <set field="acctgTransIdByAccClosingEntry" from="[:]"/>
            <!-- Thuc hien but toan ket chuyen 521 511 First-->
            <entity-find entity-name="moquivi.accounting.AccClosingEntry" list="listAccClosingEntry">
                <econdition field-name="organizationPartyId"/>
                <econdition field-name="closeTimePeriod" value="F"/>
                <order-by field-name="orderIndex"/>
            </entity-find>
            <iterate entry="accClosingEntry" list="listAccClosingEntry">
                <set field="acctgTransId" from="null"/>
                <set field="formula" from="accClosingEntry.formula"/>
                <if condition="!formula"><return message="AccClosingEntry: Formula of ${accClosingEntry.closingEntryId} is null"/></if>
                <service-call name="moquivi.accounting.reports.FormulaServices.evaluate#GlAccountOrgTimePeriod"
                              in-map="[function:formula, organizationPartyId:organizationPartyId, timePeriodId:timePeriodId]"
                              out-map="resFormula" out-map-add-to-existing="false"
                />
                <set field="formulaValue" from="resFormula.glAccountValueMap ?: null"/>
                <if condition="!formulaValue"><continue/></if>

                <set field="txDesc" value="${accClosingEntry.name} for Period ${timePeriod.periodName}"/>
                <iterate list="formulaValue.entrySet()" entry="entry">
                    <set field="glAccountId" from="entry.key"/>
                    <set field="amountValue" from="entry.value"/>
                    <if condition="amountValue">
                        <entity-find-one entity-name="mantle.ledger.account.GlAccount" value-field="glAccount" cache="true">
                            <field-map field-name="glAccountId"/></entity-find-one>
                        <set field="glAccountTypeEnumId" from="glAccount?.glAccountTypeEnumId"/>
                        <if condition="!acctgTransId">
                            <service-call name="mantle.ledger.LedgerServices.create#AcctgTrans" out-map="createOut" out-map-add-to-existing="false"
                                          in-map="[acctgTransTypeEnumId:'AttPeriodClosing', organizationPartyId:organizationPartyId,
                            transactionDate:transactionDate, description:txDesc]"/>
                            <set field="acctgTransId" from="createOut.acctgTransId"/>
                            <script>acctgTransIdByAccClosingEntry.put(accClosingEntry.closingEntryId, acctgTransId)</script>
                        </if>

                        <set field="tempC" from="[:]"/>
                        <set field="tempC.amount" from="amountValue"/>
                        <set field="tempC.debitCreditFlag" value="C"/>
                        <if condition="accClosingEntry.isDebitCreditFlag == 'C'">
                            <then>
                                <service-call name="mantle.ledger.LedgerServices.get#DefaultGlAccountByType" out-map="creditGlAccountOut" out-map-add-to-existing="false"
                                              in-map="[glAccountTypeEnumId:accClosingEntry.creditGlAccountTypeEnumId, organizationPartyId:organizationPartyId]"/>
                                <set field="tempC.glAccountId" from="creditGlAccountOut.glAccountId"/>
                                <set field="tempC.glAccountTypeEnumId" from="accClosingEntry.creditGlAccountTypeEnumId"/>
                            </then><else>
                                <set field="tempC.glAccountId" from="glAccountId"/>
                                <set field="tempC.glAccountTypeEnumId" from="glAccountTypeEnumId"/>
                            </else>
                        </if>
                        <service-call name="mantle.ledger.LedgerServices.create#AcctgTransEntry" in-map="tempC + [acctgTransId:acctgTransId]"/>

                        <set field="tempD" from="[:]"/>
                        <set field="tempD.amount" from="amountValue"/>
                        <set field="tempD.debitCreditFlag" value="D"/>
                        <if condition="accClosingEntry.isDebitCreditFlag == 'D'">
                            <then>
                                <service-call name="mantle.ledger.LedgerServices.get#DefaultGlAccountByType" out-map="debitGlAccountOut" out-map-add-to-existing="false"
                                              in-map="[glAccountTypeEnumId:accClosingEntry.debitGlAccountTypeEnumId, organizationPartyId:organizationPartyId]"/>
                                <set field="tempD.glAccountId" from="debitGlAccountOut.glAccountId"/>
                                <set field="tempD.glAccountTypeEnumId" from="accClosingEntry.debitGlAccountTypeEnumId"/>
                            </then><else>
                                <set field="tempD.glAccountId" from="glAccountId"/>
                                <set field="tempD.glAccountTypeEnumId" from="glAccountTypeEnumId"/>
                            </else>
                        </if>
                        <service-call name="mantle.ledger.LedgerServices.create#AcctgTransEntry" in-map="tempD + [acctgTransId:acctgTransId]"/>
                    </if>
                </iterate>
                <if condition="postTransactions">
                    <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans" in-map="[acctgTransId:acctgTransId]" out-map-add-to-existing="false"/>
                </if>
            </iterate>

            <!-- Thuc hien but toan ket chuyen nhung but toan con lai-->
            <entity-find entity-name="moquivi.accounting.AccClosingEntry" list="listAccClosingEntry">
                <econdition field-name="organizationPartyId"/>
                <econdition field-name="closeTimePeriod" value="N"/>
                <order-by field-name="orderIndex"/>
            </entity-find>
            <iterate entry="accClosingEntry" list="listAccClosingEntry">
                <set field="acctgTransId" from="null"/>
                <set field="formula" from="accClosingEntry.formula"/>
                <if condition="!formula"><return message="AccClosingEntry: Formula of ${accClosingEntry.closingEntryId} is null"/></if>
                <service-call name="moquivi.accounting.reports.FormulaServices.evaluate#GlAccountOrgTimePeriod"
                              in-map="[function:formula, organizationPartyId:organizationPartyId, timePeriodId:timePeriodId]"
                              out-map="resFormula" out-map-add-to-existing="false"
                />
                <set field="formulaValue" from="resFormula.glAccountValueMap ?: null"/>

                <if condition="!formulaValue"><continue/></if>
                <set field="txDesc" value="${accClosingEntry.name} for Period ${timePeriod.periodName}"/>
                <iterate list="formulaValue.entrySet()" entry="entry">
                    <set field="glAccountId" from="entry.key"/>
                    <set field="amountValue" from="entry.value"/>
                    <if condition="amountValue">
                        <entity-find-one entity-name="mantle.ledger.account.GlAccount" value-field="glAccount" cache="true">
                            <field-map field-name="glAccountId"/></entity-find-one>
                        <set field="glAccountTypeEnumId" from="glAccount?.glAccountTypeEnumId"/>
                        <if condition="!acctgTransId">
                            <service-call name="mantle.ledger.LedgerServices.create#AcctgTrans" out-map="createOut" out-map-add-to-existing="false"
                                          in-map="[acctgTransTypeEnumId:'AttPeriodClosing', organizationPartyId:organizationPartyId,
                            transactionDate:transactionDate, description:txDesc]"/>
                            <set field="acctgTransId" from="createOut.acctgTransId"/>
                            <script>acctgTransIdByAccClosingEntry.put(accClosingEntry.closingEntryId, acctgTransId)</script>
                        </if>

                        <set field="tempC" from="[:]"/>
                        <set field="tempC.amount" from="amountValue"/>
                        <set field="tempC.debitCreditFlag" value="C"/>
                        <if condition="accClosingEntry.isDebitCreditFlag == 'C'">
                            <then>
                                <service-call name="mantle.ledger.LedgerServices.get#DefaultGlAccountByType" out-map="creditGlAccountOut" out-map-add-to-existing="false"
                                              in-map="[glAccountTypeEnumId:accClosingEntry.creditGlAccountTypeEnumId, organizationPartyId:organizationPartyId]"/>
                                <set field="tempC.glAccountId" from="creditGlAccountOut.glAccountId"/>
                                <set field="tempC.glAccountTypeEnumId" from="accClosingEntry.creditGlAccountTypeEnumId"/>
                            </then><else>
                            <set field="tempC.glAccountId" from="glAccountId"/>
                            <set field="tempC.glAccountTypeEnumId" from="glAccountTypeEnumId"/>
                        </else>
                        </if>
                        <service-call name="mantle.ledger.LedgerServices.create#AcctgTransEntry" in-map="tempC + [acctgTransId:acctgTransId]"/>

                        <set field="tempD" from="[:]"/>
                        <set field="tempD.amount" from="amountValue"/>
                        <set field="tempD.debitCreditFlag" value="D"/>
                        <if condition="accClosingEntry.isDebitCreditFlag == 'D'">
                            <then>
                                <service-call name="mantle.ledger.LedgerServices.get#DefaultGlAccountByType" out-map="debitGlAccountOut" out-map-add-to-existing="false"
                                              in-map="[glAccountTypeEnumId:accClosingEntry.debitGlAccountTypeEnumId, organizationPartyId:organizationPartyId]"/>
                                <set field="tempD.glAccountId" from="debitGlAccountOut.glAccountId"/>
                                <set field="tempD.glAccountTypeEnumId" from="accClosingEntry.debitGlAccountTypeEnumId"/>
                            </then><else>
                            <set field="tempD.glAccountId" from="glAccountId"/>
                            <set field="tempD.glAccountTypeEnumId" from="glAccountTypeEnumId"/>
                        </else>
                        </if>
                        <service-call name="mantle.ledger.LedgerServices.create#AcctgTransEntry" in-map="tempD + [acctgTransId:acctgTransId]"/>
                    </if>
                </iterate>
                <if condition="postTransactions">
                    <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans" in-map="[acctgTransId:acctgTransId]" out-map-add-to-existing="false"/>
                </if>
            </iterate>
            <log message="acctgTransIdByAccClosingEntry::${acctgTransIdByAccClosingEntry}"/>
            <!--&lt;!&ndash; recalc this period &ndash;&gt;
            <service-call name="mantle.ledger.LedgerServices.recalculate#GlAccountOrgTimePeriodAmounts"
                          in-map="[timePeriodId:timePeriodId]"/>

            &lt;!&ndash; recalc parent/child periods; this query finds all parents, and using thruDate only last of children &ndash;&gt;
            <entity-find entity-name="mantle.party.time.TimePeriodAndType" list="otherTimePeriodList">
                <econdition field-name="timePeriodId" operator="not-equals" from="timePeriodId"/>
                <econdition field-name="fromDate" operator="less-equals" from="timePeriod.thruDate"/>
                <econdition field-name="thruDate" operator="greater-equals" from="timePeriod.thruDate"/>
                <econdition field-name="periodPurposeEnumId" value="Fiscal"/>
                <econdition field-name="partyId" from="organizationPartyId"/>
            </entity-find>
            <iterate list="otherTimePeriodList" entry="otherTimePeriod">
                <service-call name="mantle.ledger.LedgerServices.recalculate#GlAccountOrgTimePeriodAmounts"
                              in-map="[timePeriodId:otherTimePeriod.timePeriodId]"/>
            </iterate>-->
        </actions>
    </service>
</services>

